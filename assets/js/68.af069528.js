(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{393:function(t,a,s){"use strict";s.r(a);var n=s(7),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("Level",{attrs:{type:2}}),t._v(" "),a("h2",{attrs:{id:"问题描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题描述"}},[t._v("#")]),t._v(" 问题描述")]),t._v(" "),a("p",[t._v("二进制矩阵中的所有元素不是 "),a("strong",[t._v("0")]),t._v(" 就是 "),a("strong",[t._v("1")]),t._v(" 。")]),t._v(" "),a("p",[t._v("给你两个四叉树，"),a("code",[t._v("quadTree1")]),t._v(" 和 "),a("code",[t._v("quadTree2")]),t._v("。其中 "),a("code",[t._v("quadTree1")]),t._v(" 表示一个 "),a("code",[t._v("n * n")]),t._v(" 二进制矩阵，而 "),a("code",[t._v("quadTree2")]),t._v(" 表示另一个 "),a("code",[t._v("n * n")]),t._v(" 二进制矩阵。")]),t._v(" "),a("p",[t._v("请你返回一个表示 "),a("code",[t._v("n * n")]),t._v(" 二进制矩阵的四叉树，它是 "),a("code",[t._v("quadTree1")]),t._v(" 和 "),a("code",[t._v("quadTree2")]),t._v(" 所表示的两个二进制矩阵进行 "),a("strong",[t._v("按位逻辑或运算")]),t._v(" 的结果。")]),t._v(" "),a("p",[t._v("注意，当 "),a("code",[t._v("isLeaf")]),t._v(" 为 "),a("strong",[t._v("False")]),t._v(" 时，你可以把 "),a("strong",[t._v("True")]),t._v(" 或者 "),a("strong",[t._v("False")]),t._v(" 赋值给节点，两种值都会被判题机制 "),a("strong",[t._v("接受")]),t._v(" 。")]),t._v(" "),a("p",[t._v("四叉树数据结构中，每个内部节点只有四个子节点。此外，每个节点都有两个属性：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("val")]),t._v("：储存叶子结点所代表的区域的值。1 对应 "),a("strong",[t._v("True")]),t._v("，0 对应 "),a("strong",[t._v("False")]),t._v("；")]),t._v(" "),a("li",[a("code",[t._v("isLeaf")]),t._v(": 当这个节点是一个叶子结点时为 "),a("strong",[t._v("True")]),t._v("，如果它有 4 个子节点则为 "),a("strong",[t._v("False")]),t._v(" 。")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" isLeaf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" topLeft"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" topRight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" bottomLeft"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" bottomRight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("我们可以按以下步骤为二维区域构建四叉树：")]),t._v(" "),a("ol",[a("li",[t._v("如果当前网格的值相同（即，全为 "),a("code",[t._v("0")]),t._v(" 或者全为 "),a("code",[t._v("1")]),t._v("），将 "),a("code",[t._v("isLeaf")]),t._v(" 设为 "),a("strong",[t._v("True")]),t._v(" ，将 "),a("code",[t._v("val")]),t._v(" 设为网格相应的值，并将四个子节点都设为 "),a("strong",[t._v("Null")]),t._v(" 然后停止。")]),t._v(" "),a("li",[t._v("如果当前网格的值不同，将 "),a("code",[t._v("isLeaf")]),t._v(" 设为 "),a("strong",[t._v("False")]),t._v("， 将 "),a("code",[t._v("val")]),t._v(" 设为任意值，然后如下图所示，将当前网格划分为四个子网格。")]),t._v(" "),a("li",[t._v("使用适当的子网格递归每个子节点。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/algorithm/leetcode/0500-0599/558-1.png",alt:"四叉树交集"}})]),t._v(" "),a("p",[t._v("如果你想了解更多关于四叉树的内容，可以参考 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Quadtree",target:"_blank",rel:"noopener noreferrer"}},[t._v("wiki"),a("OutboundLink")],1),t._v(" 。")]),t._v(" "),a("p",[a("strong",[t._v("四叉树格式")]),t._v("：")]),t._v(" "),a("p",[t._v("输出为使用层序遍历后四叉树的序列化形式，其中 "),a("code",[t._v("null")]),t._v(" 表示路径终止符，其下面不存在节点。")]),t._v(" "),a("p",[t._v("它与二叉树的序列化非常相似。唯一的区别是节点以列表形式表示 "),a("code",[t._v("[isLeaf, val]")]),t._v(" 。")]),t._v(" "),a("p",[t._v("如果 "),a("code",[t._v("isLeaf")]),t._v(" 或者 "),a("code",[t._v("val")]),t._v(" 的值为 "),a("strong",[t._v("True")]),t._v(" ，则表示它在列表 "),a("code",[t._v("[isLeaf, val]")]),t._v(" 中的值为 "),a("strong",[t._v("1")]),t._v(" ；如果 "),a("code",[t._v("isLeaf")]),t._v(" 或者 "),a("code",[t._v("val")]),t._v(" 的值为 "),a("strong",[t._v("False")]),t._v(" ，则表示值为 "),a("strong",[t._v("0")]),t._v(" 。")]),t._v(" "),a("p",[t._v("示例 1：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/algorithm/leetcode/0500-0599/558-2.png",alt:"示例 1"}}),t._v(" "),a("img",{attrs:{src:"/img/algorithm/leetcode/0500-0599/558-3.png",alt:"示例 1"}})]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("输入：quadTree1 = [[0,1],[1,1],[1,1],[1,0],[1,0]]\n, quadTree2 = [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\n输出：[[0,0],[1,1],[1,1],[1,1],[1,0]]\n解释：quadTree1 和 quadTree2 如上所示。由四叉树所表示的二进制矩阵也已经给出。\n如果我们对这两个矩阵进行按位逻辑或运算，则可以得到下面的二进制矩阵，由一个作为结果的四叉树表示。\n注意，我们展示的二进制矩阵仅仅是为了更好地说明题意，你无需构造二进制矩阵来获得结果四叉树。\n")])])]),a("p",[a("img",{attrs:{src:"/img/algorithm/leetcode/0500-0599/558-4.png",alt:"示例 1"}})]),t._v(" "),a("p",[t._v("示例 2：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("输入：quadTree1 = [[1,0]]\n, quadTree2 = [[1,0]]\n输出：[[1,0]]\n解释：两个数所表示的矩阵大小都为 1*1，值全为 0\n结果矩阵大小为 1*1，值全为 0 。\n")])])]),a("p",[t._v("示例 3：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("输入：quadTree1 = [[0,0],[1,0],[1,0],[1,1],[1,1]]\n, quadTree2 = [[0,0],[1,1],[1,1],[1,0],[1,1]]\n输出：[[1,1]]\n")])])]),a("p",[t._v("示例 4：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("输入：quadTree1 = [[0,0],[1,1],[1,0],[1,1],[1,1]]\n, quadTree2 = [[0,0],[1,1],[0,1],[1,1],[1,1],null,null,null,null,[1,1],[1,0],[1,0],[1,1]]\n输出：[[0,0],[1,1],[0,1],[1,1],[1,1],null,null,null,null,[1,1],[1,0],[1,0],[1,1]]\n")])])]),a("p",[t._v("示例 5：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("输入：quadTree1 = [[0,1],[1,0],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\n, quadTree2 = [[0,1],[0,1],[1,0],[1,1],[1,0],[1,0],[1,0],[1,1],[1,1]]\n输出：[[0,0],[0,1],[0,1],[1,1],[1,0],[1,0],[1,0],[1,1],[1,1],[1,0],[1,0],[1,1],[1,1]]\n")])])]),a("p",[t._v("提示：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("quadTree1")]),t._v(" 和 "),a("code",[t._v("quadTree2")]),t._v(" 都是符合题目要求的四叉树，每个都代表一个 "),a("code",[t._v("n * n")]),t._v(" 的矩阵。")]),t._v(" "),a("li",[a("code",[t._v("n == 2"),a("sup",[t._v("x")])]),t._v(" ，其中 "),a("code",[t._v("0 <= x <= 9")]),t._v(".")])]),t._v(" "),a("h2",{attrs:{id:"递归"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递归"}},[t._v("#")]),t._v(" 递归")]),t._v(" "),a("p",[t._v("分并递归处理四个区域，传入的节点有以下几种情况：")]),t._v(" "),a("ul",[a("li",[t._v("传入的节点均不为叶子节点，则将两个节点的四个区域继续递归处理。\n"),a("ul",[a("li",[t._v("若处理完后的四个节点都为叶子节点，且值都相同，则合并返回一个新的叶子节点（由于四个节点都一样，也可以直接返回四个中的一个）。")]),t._v(" "),a("li",[t._v("若四个节点任意一个非叶子节点，或值不一致，则无法合并为叶子节点，创建一个新的非叶子节点，并将四个子节点设置为处理后的四个子节点返回。")])])]),t._v(" "),a("li",[t._v("传入的节点至少一个是叶子节点。\n"),a("ul",[a("li",[t._v("若存在值为 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[t._v("T")]),a("mi",[t._v("r")]),a("mi",[t._v("u")]),a("mi",[t._v("e")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("True")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.6833em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.13889em"}},[t._v("T")]),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.02778em"}},[t._v("r")]),a("span",{staticClass:"mord mathnormal"},[t._v("u")]),a("span",{staticClass:"mord mathnormal"},[t._v("e")])])])]),t._v(" 的叶子节点，由于 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[t._v("T")]),a("mi",[t._v("r")]),a("mi",[t._v("u")]),a("mi",[t._v("e")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("True")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.6833em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.13889em"}},[t._v("T")]),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.02778em"}},[t._v("r")]),a("span",{staticClass:"mord mathnormal"},[t._v("u")]),a("span",{staticClass:"mord mathnormal"},[t._v("e")])])])]),t._v(" 逻辑或任何值都为 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[t._v("T")]),a("mi",[t._v("r")]),a("mi",[t._v("u")]),a("mi",[t._v("e")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("True")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.6833em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.13889em"}},[t._v("T")]),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.02778em"}},[t._v("r")]),a("span",{staticClass:"mord mathnormal"},[t._v("u")]),a("span",{staticClass:"mord mathnormal"},[t._v("e")])])])]),t._v("，所以可以直接返回该节点。")]),t._v(" "),a("li",[t._v("若不能存在值为 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[t._v("T")]),a("mi",[t._v("r")]),a("mi",[t._v("u")]),a("mi",[t._v("e")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("True")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.6833em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.13889em"}},[t._v("T")]),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.02778em"}},[t._v("r")]),a("span",{staticClass:"mord mathnormal"},[t._v("u")]),a("span",{staticClass:"mord mathnormal"},[t._v("e")])])])]),t._v(" 的叶子节点，由于 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[t._v("F")]),a("mi",[t._v("a")]),a("mi",[t._v("l")]),a("mi",[t._v("s")]),a("mi",[t._v("e")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("False")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.6944em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.13889em"}},[t._v("F")]),a("span",{staticClass:"mord mathnormal"},[t._v("a")]),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.01968em"}},[t._v("l")]),a("span",{staticClass:"mord mathnormal"},[t._v("se")])])])]),t._v(" 逻辑或任何值都为原有的值，若存在非叶子节点，两个节点逻辑或后仍未非叶子节点原有值，因此，优先返回非叶子节点即可。")])])])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * // Definition for a QuadTree node.\n * function Node(val,isLeaf,topLeft,topRight,bottomLeft,bottomRight) {\n *    this.val = val;\n *    this.isLeaf = isLeaf;\n *    this.topLeft = topLeft;\n *    this.topRight = topRight;\n *    this.bottomLeft = bottomLeft;\n *    this.bottomRight = bottomRight;\n * };\n */")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * @param {Node} quadTree1\n * @param {Node} quadTree2\n * @return {Node}\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("intersect")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("quadTree1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" quadTree2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("quadTree1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isLeaf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("quadTree2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isLeaf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" topLeft "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("intersect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("quadTree1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("topLeft"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" quadTree2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("topLeft"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" topRight "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("intersect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("quadTree1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("topRight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" quadTree2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("topRight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bottomLeft "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("intersect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("quadTree1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bottomLeft"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" quadTree2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bottomLeft"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bottomRight "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("intersect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("quadTree1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bottomRight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" quadTree2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bottomRight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" isLeaf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" topLeft"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isLeaf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" topRight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isLeaf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" bottomLeft"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isLeaf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" bottomRight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isLeaf\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" isSame "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" topLeft"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" topRight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" topLeft"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" bottomLeft"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" bottomLeft"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" bottomRight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isLeaf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" isSame"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" topLeft\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" topLeft"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" topRight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bottomLeft"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bottomRight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("quadTree1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isLeaf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" quadTree1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" quadTree1\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("quadTree2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isLeaf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" quadTree2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" quadTree2\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" quadTree1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isLeaf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" quadTree2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" quadTree1\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("时间复杂度："),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[t._v("O")]),a("mo",{attrs:{stretchy:"false"}},[t._v("(")]),a("msup",[a("mi",[t._v("n")]),a("mn",[t._v("2")])],1),a("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(n^2)")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"1.0641em","vertical-align":"-0.25em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),a("span",{staticClass:"mopen"},[t._v("(")]),a("span",{staticClass:"mord"},[a("span",{staticClass:"mord mathnormal"},[t._v("n")]),a("span",{staticClass:"msupsub"},[a("span",{staticClass:"vlist-t"},[a("span",{staticClass:"vlist-r"},[a("span",{staticClass:"vlist",staticStyle:{height:"0.8141em"}},[a("span",{staticStyle:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),a("span",{staticClass:"sizing reset-size6 size3 mtight"},[a("span",{staticClass:"mord mtight"},[t._v("2")])])])])])])])]),a("span",{staticClass:"mclose"},[t._v(")")])])])])]),t._v(" "),a("li",[t._v("空间复杂度："),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[t._v("O")]),a("mo",{attrs:{stretchy:"false"}},[t._v("(")]),a("mi",[t._v("l")]),a("mi",[t._v("o")]),a("mi",[t._v("g")]),a("mtext"),a("mi",[t._v("n")]),a("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(log\\;n)")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),a("span",{staticClass:"mopen"},[t._v("(")]),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.01968em"}},[t._v("l")]),a("span",{staticClass:"mord mathnormal"},[t._v("o")]),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03588em"}},[t._v("g")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2778em"}}),a("span",{staticClass:"mord mathnormal"},[t._v("n")]),a("span",{staticClass:"mclose"},[t._v(")")])])])])])])],1)}),[],!1,null,null,null);a.default=e.exports}}]);